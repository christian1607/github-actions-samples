name: Terraform Module Pipeline
run-name: "Terraform Module Pipeline"
env:
  TF_VERSION: '1.5.4'
  GO_VERSION: '1.21'
on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths: 
    - terraform/modules/**
  pull_request: 
    branches:
    - main
    paths:
    - terraform/modules/**
jobs:

  check_module:
    name: "Security Scan"
    environment: dev
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/modules/vpc/
        soft_fail: false
        download_external_modules: true
        
  test_module:
    needs: check_module
    name: "Test Module"
    if: github.event_name == 'pull_request'
    environment: dev
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }} 
      AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v4
      name: Install Golang
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Go Mod Tidy
      working-directory: terraform/modules/vpc
      run: go mod tidy

    - uses: hashicorp/setup-terraform@v2
      name: Setup Terraform
      with:
        terraform_version: ${{ env.TF_VERSION }}
#        cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
        terraform_wrapper: false # this change is mandatory in order to work with terratest
        
  #  - name: Test Module
  #    working-directory: terraform/modules/vpc/test
  #    run: go test -v 

  update_documentation:
    needs: test_module
    if: github.ref == 'refs/heads/main' && always()
    name: "Update Documentation"
    environment: dev
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: terradoc
      uses: terraform-docs/gh-actions@main
      with:
        working-dir: terraform/modules/vpc
        output-file: README.md
        output-method: inject
        git-push: "true"
  
  release_version:
    needs: update_documentation
    if: github.ref == 'refs/heads/main' && always()
    name: "Release new version"
    environment: dev
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'  

    - name: Determine Version
      id: version_step # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Create Tag
      working-directory: terraform/modules/vpc
      run: | 
        git config user.email "noreply@example.com"
        git config user.name "Github Actions"
        git tag -a "${{ steps.version_step.outputs.semVer }}" -m "Publish tag"
        git push origin "${{ steps.version_step.outputs.semVer }}" -q

      